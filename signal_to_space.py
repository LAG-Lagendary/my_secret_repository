import subprocess
import time
import os
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TARGET_IP = '8.8.8.8'          # –¶–µ–ª—å: Google Public DNS
INTERVAL_SECONDS = 30          # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏
PING_COMMAND = ['ping', '-c', '1', TARGET_IP] # –ö–æ–º–∞–Ω–¥–∞: –ø–∏–Ω–≥, 1 –ø–∞–∫–µ—Ç, –Ω–∞ —Ü–µ–ª–µ–≤–æ–π IP

def run_ping_counter():
    count = 0
    pid = os.getpid()
    
    print(f"üöÄ [PID: {pid}] –ó–∞–ø—É—Å–∫ —Å—á–µ—Ç—á–∏–∫–∞ PING...")
    print(f"   –¶–µ–ª—å: {TARGET_IP} | –ò–Ω—Ç–µ—Ä–≤–∞–ª: {INTERVAL_SECONDS} —Å–µ–∫.")
    print("-" * 50)

    while True:
        try:
            timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
            print(f"[{timestamp}] === –û–¢–°–ß–ï–¢ {count} ===")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É ping –∏ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥
            # 'capture_output=True' - –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç stdout –∏ stderr
            # 'text=True' - –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç –≤—ã–≤–æ–¥ –∫–∞–∫ —Ç–µ–∫—Å—Ç
            result = subprocess.run(PING_COMMAND, capture_output=True, text=True, timeout=20) 

            if result.returncode == 0:
                # –ü–∞–∫–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ.
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (–ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å) –∏–∑ –≤—ã–≤–æ–¥–∞ ping
                # –≠—Ç–æ—Ç —à–∞–≥ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π –ø–æ–¥—Å—Ç—Ä–æ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–° (Linux/Windows)
                if sys.platform.startswith('linux') or sys.platform == 'darwin':
                    # –î–ª—è Linux/macOS
                    time_line = [line for line in result.stdout.split('\n') if 'time=' in line]
                    latency = time_line[0].split('time=')[1].split(' ')[0] if time_line else 'N/A'
                    print(f"   ‚úÖ –°–¢–ê–¢–£–°: –£—Å–ø–µ—à–Ω–æ. –ó–∞–¥–µ—Ä–∂–∫–∞ (latency): {latency} –º—Å")
                else:
                    # –î–ª—è Windows, –≤—ã–≤–æ–¥ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è
                    print(f"   ‚úÖ –°–¢–ê–¢–£–°: –£—Å–ø–µ—à–Ω–æ (–î–µ—Ç–∞–ª–∏: {result.stdout.strip().splitlines()[-2]})")
            else:
                # –ü–∞–∫–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω (—Ç–∞–π–º–∞—É—Ç, —Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏ —Ç.–ø.)
                print(f"   ‚ùå –°–¢–ê–¢–£–°: –û—à–∏–±–∫–∞. –ü–∞–∫–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω (–ö–æ–¥: {result.returncode})")
                
            print("-" * 50)
            
            count += 1
            # –ü–∞—É–∑–∞ –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
            time.sleep(INTERVAL_SECONDS)
            
        except KeyboardInterrupt:
            print(f"\n[{pid}] –ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C).")
            break
        except subprocess.TimeoutExpired:
            print(f"   ‚ùå –°–¢–ê–¢–£–°: –û—à–∏–±–∫–∞. –ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ping.")
            print("-" * 50)
            count += 1
            time.sleep(INTERVAL_SECONDS)
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            break

if __name__ == "__main__":
    run_ping_counter()
